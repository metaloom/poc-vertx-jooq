/*
 * This file is generated by jOOQ.
 */
package io.metaloom.poc.db.jooq.tables;


import io.metaloom.poc.db.jooq.Indexes;
import io.metaloom.poc.db.jooq.Keys;
import io.metaloom.poc.db.jooq.Public;
import io.metaloom.poc.db.jooq.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>public.user.uuid</code>.
     */
    public final TableField<UserRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.user.username</code>.
     */
    public final TableField<UserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.user.firstname</code>.
     */
    public final TableField<UserRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.lastname</code>.
     */
    public final TableField<UserRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.passwordhash</code>.
     */
    public final TableField<UserRecord, String> PASSWORDHASH = createField(DSL.name("passwordhash"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.email</code>.
     */
    public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.enabled</code>.
     */
    public final TableField<UserRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.user.meta</code>.
     */
    public final TableField<UserRecord, String> META = createField(DSL.name("meta"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.created</code>.
     */
    public final TableField<UserRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.user.creator_uuid</code>.
     */
    public final TableField<UserRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user.edited</code>.
     */
    public final TableField<UserRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.user.editor_uuid</code>.
     */
    public final TableField<UserRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>public.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_USERNAME_IDX);
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.USER_PKEY;
    }

    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.USER_PKEY, Keys.USER_USERNAME_KEY);
    }

    @Override
    public List<ForeignKey<UserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserRecord, ?>>asList(Keys.USER__USER_CREATOR_UUID_FKEY, Keys.USER__USER_EDITOR_UUID_FKEY);
    }

    private transient User _userCreatorUuidFkey;
    private transient User _userEditorUuidFkey;

    public User userCreatorUuidFkey() {
        if (_userCreatorUuidFkey == null)
            _userCreatorUuidFkey = new User(this, Keys.USER__USER_CREATOR_UUID_FKEY);

        return _userCreatorUuidFkey;
    }

    public User userEditorUuidFkey() {
        if (_userEditorUuidFkey == null)
            _userEditorUuidFkey = new User(this, Keys.USER__USER_EDITOR_UUID_FKEY);

        return _userEditorUuidFkey;
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<java.util.UUID, String, String, String, String, String, Boolean, String, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
